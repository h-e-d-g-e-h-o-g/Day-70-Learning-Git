On this day, we will learn how Git works? and how can I use it to achieve powerful ends/goals.
By using Git on command line, we will know, how you can use it to do:-
version control, how to clone repositories,fork them, how to make pull requests and how to merge.
Now, let's understand what is version control?
For example, you have a code file and you add line of code into it.
You call this, save point no.1
Now, at next step, you have added more line of code into the existing codes.
You call this, save point no.2
Then, at next step, you might mess up the code and it is far away from being fixed.
Therefore, we can roll back to the save point no.2 or no.1, whatever you have made and wanted to go.

Now, working with the command line.
I can navigate to any folder I want.
To create file through CLI, you need to use "touch filename".
In order to open the file you've created, use "code filename".
Now, we will create a git local directory to track changes in the file, to commit changes and to perform version control.
To initialize git, you need to type simply "git init".
Now, in order to track changes in a file, you need to add it into an area that's called "staging area".
Now, in order to find what's inside of a staging area, you can use "git status" command.
After, you will get to see the files, if the files in a working directory in which git repository is initialized, 
if that file's changes are not being tracked, then that will be shown as red.
If file's changes are being tracked, then that will be shown as green.
In order to add file in a staging area, you need to type "git add filename".
Now, if the file comes in the staging area, it is ready to be committed.
In order to commit the changes, we need to type "git commit -m msg".
Here, msg represents the changes you've done in the file.
You can see the commit you've made till now, through "git log" command.
There would be hash that would uniquley identify the commit you've made.
Each commit will have different identity.
Now, if I have multiple files in the working directory then, it will be difficult for me to add each and every file into
the staging area.
To make it easier, you need to use "git add ." 
The "." will represents all the files that are inside the working directory and will be added into the staging area.
NOTE:- Each commit represents a new save point.
The position "head" represents the position or the state, we are currently in.

Now, recaping what we've learned.
As, we have current working directory, in which we have a file and we have initialized a local git repository.
Git will track the changes between the working directory and git repository.
Now, to track the changes, we need to push the file into staging area.
So, now why there is staging area at first place, just why can't we add the file to repository directory.
Because, we don't want to commit or to track all the file changes.
In staging area, we only put those files that we want to commit.
After, the file is addded into the staging area, we need to commit it and after, it will be added into local repository.
That would be called our "version".
We can go to version to previous version by rollback.
We need to use "git checkout filename" command.

Note:- we can use "git diff filename" to find the difference between the current version and previous saved version of the file.

Now, previously, we have talked about the local repository.
Now, we will learn how to create remote repository that is hosted on remote location or somebody's desktop using GitHub.
In order to create one, we need to push the local git repository inside our working directory into remote repository.
We need to copy the url of GitHub repository.
Now, our goal here is to push the commits that we've made in our local repo to remote repo.
To do that, we need to create repo through command "git remote add origin url"
Here, origin is the name of the repo, but we can name remote repo anything.
But the most developers follow the origin naming convention to name their remote repo.
url is the address of the github repository that is going to held the local repo's commits.
Next, to puch local repo to remote repo, use command "git push -u origin main"
Here, the local repo is pushed to remote repo through -u flag, it links the local repo with the remote repo.
The command pushed the local repo to the main branch of remote repo.

Now, your all the files on local repo, are now on GitHub repo.
Now, if you go at the "insights" page and tap on the network button, you can see the main branch having two save points 
or commits.
NOTE:- The main branch is a branch of commits or save points, it tracks the sequence in which you have made commits.